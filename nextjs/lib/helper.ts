import {
  WETHPaymaster__factory,
  USDPaymaster__factory,
  FixedPaymaster__factory,
  VerifyingPaymaster__factory,
  ERC20__factory,
  USDToken__factory,
  WETH__factory,
  EntryPoint__factory,
  BasePaymaster__factory,
} from "@aa-lib/contracts"
import {
  ERC4337EthersProvider,
  wrapSimpleProvider,
  wrapPaymasterProvider,
  TokenPaymasterAPI,
  VerifiedPaymasterAPI,
} from "@aa-lib/sdk"
import { Signer } from "ethers"
import {
  formatEther,
  formatUnits,
  parseEther,
  parseUnits,
} from "ethers/lib/utils.js"
import { LOCAL_CONFIG } from "@/config"
import { provider, admin } from "./instances"
import { Balance, Currency, PaymasterMode } from "./type"
import { Address } from "wagmi"

const {
  bundlerUrl,
  entryPoint,
  accountFactory,
  accountForTokenFactory,
  usdt,
  weth,
  tokenAddr,
  wethPaymaster,
  usdtPaymaster,
  fixedPaymaster,
  gaslessPaymaster,
} = LOCAL_CONFIG

export const parseExpectedGas = (e: Error): Error => {
  // parse a custom error generated by the BundlerHelper, which gives a hint of how much payment is missing
  const match = e.message?.match(/paid (\d+) expected (\d+)/)
  if (match != null) {
    const paid = Math.floor(parseInt(match[1]) / 1e9)
    const expected = Math.floor(parseInt(match[2]) / 1e9)
    return new Error(
      `Error: Paid ${paid}, expected ${expected} . Paid ${Math.floor(
        (paid / expected) * 100,
      )}%, missing ${expected - paid} `,
    )
  }
  return e
}

export async function getAAProvider(
  paymasterMode: PaymasterMode,
  owner: Signer,
): Promise<ERC4337EthersProvider> {
  switch (paymasterMode) {
    case PaymasterMode.none:
      return await wrapSimpleProvider(
        provider,
        {
          entryPointAddress: entryPoint,
          bundlerUrl: bundlerUrl,
          accountFacotry: accountFactory,
        },
        owner,
      )
    case PaymasterMode.weth:
      return await wrapPaymasterProvider(
        provider,
        {
          entryPointAddress: entryPoint,
          bundlerUrl: bundlerUrl,
          accountFacotry: accountForTokenFactory,
          paymasterAPI: new TokenPaymasterAPI(wethPaymaster),
        },
        owner,
        weth,
        wethPaymaster,
      )
    case PaymasterMode.usdt:
      return await wrapPaymasterProvider(
        provider,
        {
          entryPointAddress: entryPoint,
          bundlerUrl: bundlerUrl,
          accountFacotry: accountForTokenFactory,
          paymasterAPI: new TokenPaymasterAPI(usdtPaymaster),
        },
        owner,
        usdt,
        usdtPaymaster,
      )
    case PaymasterMode.token:
      return await wrapPaymasterProvider(
        provider,
        {
          entryPointAddress: entryPoint,
          bundlerUrl: bundlerUrl,
          accountFacotry: accountForTokenFactory,
          paymasterAPI: new TokenPaymasterAPI(fixedPaymaster),
        },
        owner,
        tokenAddr,
        fixedPaymaster,
      )
    case PaymasterMode.gasless:
      return await wrapSimpleProvider(
        provider,
        {
          entryPointAddress: entryPoint,
          bundlerUrl: bundlerUrl,
          accountFacotry: accountFactory,
          paymasterAPI: new VerifiedPaymasterAPI(gaslessPaymaster, owner),
        },
        owner,
      )
    default:
      throw new Error("Not implemented")
  }
}

export const MODE_PAYMASTER_MAP = {
  [PaymasterMode.usdt]: usdtPaymaster,
  [PaymasterMode.weth]: wethPaymaster,
  [PaymasterMode.gasless]: gaslessPaymaster,
  [PaymasterMode.token]: fixedPaymaster,
}

export async function deposit(paymasterMode: PaymasterMode, amount = "1") {
  if (paymasterMode === PaymasterMode.none) {
    return
  }

  const paymasterAddress = MODE_PAYMASTER_MAP[paymasterMode]
  await BasePaymaster__factory.connect(paymasterAddress, admin).deposit({
    value: parseEther(amount),
  })
  return paymasterAddress
}

export async function getDepositInfo(paymasterMode: PaymasterMode) {
  // There is no paymaster for simple account mode
  if (paymasterMode === PaymasterMode.none) {
    return
  }

  const stakeManager = await EntryPoint__factory.connect(entryPoint, provider)
  return stakeManager.getDepositInfo(MODE_PAYMASTER_MAP[paymasterMode])
}

export async function getDeposit(paymasterMode: PaymasterMode) {
  switch (paymasterMode) {
    case PaymasterMode.weth: {
      const paymaster = WETHPaymaster__factory.connect(wethPaymaster, admin)
      return paymaster.getDeposit()
    }
    case PaymasterMode.usdt: {
      const paymaster = USDPaymaster__factory.connect(usdtPaymaster, admin)
      return paymaster.getDeposit()
    }
    case PaymasterMode.token: {
      const paymaster = FixedPaymaster__factory.connect(fixedPaymaster, admin)
      return paymaster.getDeposit()
    }
    case PaymasterMode.gasless: {
      const paymaster = VerifyingPaymaster__factory.connect(
        gaslessPaymaster,
        admin,
      )
      return paymaster.getDeposit()
    }
  }
}

export async function getBalanceOf(
  of: Address,
  tokenAddress?: Address,
): Promise<Balance> {
  if (tokenAddress) {
    const token = await ERC20__factory.connect(tokenAddress, provider)
    const value = await token.balanceOf(of)
    const symbol = await token.symbol()
    const decimals = await token.decimals()

    return {
      value,
      symbol,
      decimals,
      formatted: formatUnits(value, decimals),
    }
  }

  const value = await provider.getBalance(of)
  return {
    value,
    symbol: "eth",
    decimals: 18,
    formatted: formatEther(value),
  }
}

export const getUserBalances = async (address: Address) => {
  const etherBalance = await getBalanceOf(address)
  const wethBalance = await getBalanceOf(address, weth)
  const usdtBalance = await getBalanceOf(address, usdt)
  const tokenBalance = await getBalanceOf(address, tokenAddr)
  return {
    ether: etherBalance,
    weth: wethBalance,
    usdt: usdtBalance,
    token: tokenBalance,
  }
}

export const faucet = async (address: Address, token?: Currency) => {
  const requiredBalance = parseEther("1")
  switch (token) {
    case Currency.ether: {
      const bal = await getBalanceOf(address)
      if (bal.value.lt(requiredBalance)) {
        await admin.sendTransaction({
          to: address,
          value: requiredBalance.sub(bal.value),
        })
      } else {
        console.log("not funding account. balance is enough")
      }
      break
    }
    case Currency.weth: {
      const bal = await getBalanceOf(address, weth)
      if (bal.value.lt(requiredBalance)) {
        const requiredAmount = requiredBalance.sub(bal.value)
        // wrap ETH to WETH
        await admin.sendTransaction({
          to: weth,
          value: requiredAmount,
        })
        await WETH__factory.connect(weth, admin).transfer(
          address,
          requiredAmount,
        )
      } else {
        console.log("not funding account. balance is enough")
      }
      break
    }
    case Currency.usdt: {
      const requiredUSD = parseUnits("50000", 8)
      const bal = await getBalanceOf(address, usdt)
      if (bal.value.lt(requiredUSD)) {
        const usdToken = USDToken__factory.connect(usdt, admin)
        await usdToken.transfer(address, requiredUSD.sub(bal.value))
      } else {
        console.log("not funding account. balance is enough")
      }
      break
    }
    case Currency.token: {
      const requiredTok = parseEther("1")
      const ERC20Token = ERC20__factory.connect(tokenAddr, admin)
      await ERC20Token.mint(parseEther("1"))
      await ERC20Token.transfer(address, requiredTok)
      break
    }
    default: {
      throw new Error("Unknown token")
    }
  }
}

const TOKEN_ADDRESS_MAP = {
  [Currency.usdt]: usdt,
  [Currency.weth]: weth,
  [Currency.token]: tokenAddr,
}

export const transfer = async (
  currency: Currency,
  target: Address,
  amount: string,
  aaProvider: ERC4337EthersProvider,
) => {
  switch (currency) {
    case Currency.ether: {
      // const op = await aaProvider
      //   .getSigner()
      //   .smartAccountAPI.createSignedUserOp({
      //     target,
      //     data: "0x",
      //     value: parseEther(amount),
      //   })
      // const hash = await aaProvider.httpRpcClient.sendUserOpToBundler(op)
      // console.log("ðŸš€ ~ file: helper.ts:305 ~ hash:", hash)
      const response = await aaProvider.getSigner().sendTransaction({
        to: target,
        data: "0x0".padEnd(4, "0"),
        value: parseEther(amount),
        gasLimit: 1e5,
      })
      await response.wait()
      break
    }
    case Currency.weth:
    case Currency.usdt:
    case Currency.token: {
      const tokenAddress = TOKEN_ADDRESS_MAP[currency]
      const tokenContract = ERC20__factory.connect(tokenAddress, aaProvider)
      const decimals = await tokenContract.decimals()
      const data = tokenContract.interface.encodeFunctionData("transfer", [
        target,
        parseUnits(amount, decimals),
      ])
      const response = await aaProvider.getSigner().sendTransaction({
        data,
        to: tokenAddress,
      })
      await response.wait()
      break
    }
    default: {
      throw new Error("Unknown token")
    }
  }
}
